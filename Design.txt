Managing the models in the game:
--------------------------------

- use a linked list for the models
- the list will be saved on the heap

- each model will have (each staruct essentially):

	- bounding_box_len (integer)			--> 2 bytes \
	- bounding_box_width (integer)			--> 2 bytes |\
	- top_left_x_position (integer) 		--> 2 bytes	| \  12 bytes total
	- top_left_y_position (integer)			--> 2 bytes	| /
	- pixel_layout (ptr to a pixel array)	--> 2 bytes	|/
	- pointer to the next object 			--> 2 bytes	/
	
- we will have a function that adds a node at the end:

	- using the malloc function to allocate 12 bytes (the size of the struct)
	- initialize the model pointer
	- initialize next to null (0)
	- x & y positions will be initialized in the function above 
	- length & width positions will be initialized in the function above 

Drawing order:
--------------
	save a copy of the map without moving models such as:

	- HP
	- bosses
	- player
	- projectiles

	when we move a model, we take a rectangle from the background first,
	draw it at the old location, and then drawing the model at the new location.
	to make models not delete each other we first clear the background and then 
	starting to draw all the models.

	to reset the background:

		we look at the bounding box
		of each model, and for each pixel
		checking the pixel range:

		- if 0 <= y < 150   --> the pixel should be Light Cyan.
		- if 150 <= y < 155 --> the pixel should be Light Green.
		- if 155 <= y < 200 --> the pixel should be Brown.

		** the x value does not matter.

	after we do that, we can draw al the models.
	the models draw priority is (lowest to highest):
	
	1. bosses
	2. player
	3. projectiles
	4. HP